The Collection interface is one of the core interfaces in the Java Collections Framework, 
which provides a unified architecture for working with collections of objects. 
A collection is a group of objects that can be manipulated and operated upon collectively. 
The Collection interface defines a common set of methods that all collection classes must implement. 
Here's an overview of the Collection interface:

public interface Collection<E> extends Iterable<E> {
    // Basic operations
    int size();
    boolean isEmpty();
    boolean contains(Object o);
    boolean add(E e);
    boolean remove(Object o);
    void clear();

    // Bulk operations
    boolean addAll(Collection<? extends E> c);
    boolean removeAll(Collection<?> c);
    boolean retainAll(Collection<?> c);

    // Conversion to array
    Object[] toArray();
    <T> T[] toArray(T[] a);

    // Iteration
    Iterator<E> iterator();

    // Additional methods
    boolean containsAll(Collection<?> c);
    boolean equals(Object o);
    int hashCode();
    default Stream<E> stream();
    default Stream<E> parallelStream();
    String toString();
}


Key points about the Collection interface:
---------------------------------------------------------------------------------------
1. Basic Methods: The Collection interface defines methods to perform basic operations on 
collections, such as checking size, checking if the collection is empty, adding and removing 
elements, and checking for the presence of an element.

2.Bulk Operations: Bulk operations involve adding, removing, or retaining all elements from 
another collection. These methods provide efficient ways to modify collections in batches.

3.Conversion to Array: The toArray methods allow you to convert the collection's elements into an 
array. The second form allows you to provide an array of the desired type.

4.Iteration: The iterator method returns an iterator, which you can use to traverse through 
the elements of the collection one by one.

5.Additional Methods: The interface also provides methods to check if the collection contains 
all elements of another collection, check equality with another object, calculate a hash code, 
and more.

6.Stream Support: Java 8 introduced methods stream and parallelStream that allow you to create 
streams of elements from the collection.

The Collection interface serves as the foundation for various collection types, including List, 
Set, and Queue. These subinterfaces and classes provide additional behavior specific to the type 
of collection they represent.

When working with classes that implement the Collection interface, you can use polymorphism 
to write code that works with any collection implementation that adheres to the Collection contract. 
This allows for flexible and reusable code that can be easily adapted to different collection types.






